<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Daniel Röhers Moura</title><description>&lt;p&gt;JavaScript Lover | Web Evangelist&lt;/p&gt;

&lt;p&gt;Software Developer Engineer at &lt;a href="http://handson.tv/"&gt;HandsOn.TV&lt;/a&gt;&lt;/p&gt;</description><link>http://localhost:2368/</link><generator>Ghost 0.8</generator><lastBuildDate>Fri, 20 May 2016 16:12:59 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>{{ Mustache }}</title><description>&lt;p&gt;Bueno... Esse post não será longo, vamos direto ao ponto.&lt;/p&gt;

&lt;p&gt;Você provavelmente já passou por algo assim algum dia:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var $name = $('&amp;lt;div/&amp;gt;', { class: 'form-group' }).append($('&amp;lt;input/&amp;gt;', {  
  class: 'form-control required',
  type: 'text',
  name: 'name',
  placeholder: 'Name',
}).attr('required', true));

var $email = $('&amp;lt;&lt;/code&gt;&lt;/pre&gt;</description><link>http://localhost:2368/2016/05/19/mustache/</link><guid isPermaLink="false">89f669b7-32ad-4d4d-bcda-01dd97d03243</guid><dc:creator>Daniel Röhers Moura</dc:creator><pubDate>Thu, 19 May 2016 23:34:32 GMT</pubDate><content:encoded>&lt;p&gt;Bueno... Esse post não será longo, vamos direto ao ponto.&lt;/p&gt;

&lt;p&gt;Você provavelmente já passou por algo assim algum dia:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var $name = $('&amp;lt;div/&amp;gt;', { class: 'form-group' }).append($('&amp;lt;input/&amp;gt;', {  
  class: 'form-control required',
  type: 'text',
  name: 'name',
  placeholder: 'Name',
}).attr('required', true));

var $email = $('&amp;lt;div/&amp;gt;', { class: 'form-group' }).append($('&amp;lt;input/&amp;gt;', {  
  class: 'form-control required email',
  type: 'email',
  name: 'email',
  placeholder: 'Email',
}).attr('required', true));

var $textarea = $('&amp;lt;div/&amp;gt;', { class: 'form-group' }).append($('&amp;lt;textarea/&amp;gt;', {  
  class: 'form-control required',
  rows: '4',
  name: 'body',
  placeholder: 'Add a comment...',
}).attr('required', true));

var $button = $('&amp;lt;button/&amp;gt;', { class: 'btn btn-default', type: 'submit' }).html('Post Reply');

var $form = $('&amp;lt;form/&amp;gt;', {  
  class: 'player-comment-form',
  style: 'display: none;',
  role: 'form',
  action: '/video/' + slug + '/comment/' + commentId + '/child',
  method: 'POST'
});

$form.append($name);
$form.append($email);
$form.append($textarea);
$form.append($button);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ou então em vez de criar elementos DOM, você concatenou Strings, tipo...&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var html = '';  
htlm += '&amp;lt;form style="" role="form" action="/video/' + slug + '/comment/' + commentId + '/child" method="POST" class="player-comment-form"&amp;gt;';  
html += '  &amp;lt;div class="form-group"&amp;gt;';  
html += '    &amp;lt;input type="text" name="name" placeholder="Name" value="" required="" class="form-control required"&amp;gt;';  
html += '  &amp;lt;/div&amp;gt;';

html += '  &amp;lt;div class="form-group"&amp;gt;';  
html += '    &amp;lt;input type="email" name="email" placeholder="Email" value="" required="" class="form-control required email"&amp;gt;';  
html += '  &amp;lt;/div&amp;gt;';

html += '  &amp;lt;div class="form-group"&amp;gt;';  
html += '    &amp;lt;textarea rows="4" name="body" placeholder="Add a comment..." required="" class="form-control required"&amp;gt;&amp;lt;/textarea&amp;gt;';  
html += '  &amp;lt;/div&amp;gt;';

html += '  &amp;lt;button type="submit" class="btn btn-default"&amp;gt;Post Reply&amp;lt;/button&amp;gt;';  
html += '&amp;lt;/form&amp;gt;';  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Algo mais simples...&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var html = '';  
html += '&amp;lt;div&amp;gt;';  
html += '  &amp;lt;h1&amp;gt;' + title + '&amp;lt;/h1&amp;gt;';  
html += '  &amp;lt;p&amp;gt;' + description + '&amp;lt;/p&amp;gt;';  
html += '&amp;lt;/div&amp;gt;';  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pois bem, seus dias de sofrimento acabaram. Conheça agora &lt;a href="https://mustache.github.io"&gt;Mustache&lt;/a&gt; :)&lt;/p&gt;

&lt;h2 id="mustache"&gt;Mustache&lt;/h2&gt;

&lt;p&gt;Mustache nada mais é, do que um simples, cru e nú template engine que é compatível com N linguagens e também possui um CLI.&lt;/p&gt;

&lt;h3 id="instalando"&gt;Instalando&lt;/h3&gt;

&lt;p&gt;Possuindo só 10KB, instalar não é um mistério :)&lt;/p&gt;

&lt;p&gt;No caso de JS, você pode instalar...&lt;/p&gt;

&lt;p&gt;Via NPM:  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;$ [sudo] npm install mustache --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Via bower:  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;$ bower install --save mustache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CLI:  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;$ npm install -g mustache

$ mustache dataView.json myTemplate.mustache &amp;gt; output.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CDN:  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;script src="https://cdnjs.cloudflare.com/ajax/libs/mustache.js/2.2.1/mustache.min.js "&amp;gt;&amp;lt;/script&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="usandoesendofeliz"&gt;Usando e sendo feliz&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Você pode conferir a documentação &lt;a href="https://github.com/janl/mustache.js"&gt;aqui&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Para exemplificar, iremos utilizar o código anterior.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var data = {  
  title: 'Mustache',
  description: 'sendo feliz'
};

var output = Mustache.render('&amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;{{description}}&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;', data);

document.getElementById('target').innerHTML = output;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;E era isso, agora é bem mais fácil do que ficar concatenando Strings ;)&lt;/p&gt;

&lt;p&gt;Mas, espera aí... Nem sempre seu template será simples assim e daí?&lt;/p&gt;

&lt;p&gt;Aí você utiliza os templates :)&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;script id="template" type="x-tmpl-mustache"&amp;gt;  
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;{{ title }}&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;{{ description }}&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/script&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var template = document.getElementById('template').innerHTML;

var data = {  
  title: 'Mustache',
  description: 'sendo feliz'
};

var output = Mustache.render(template, data);

document.getElementById('target').innerHTML = output;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Agora SIM! :D&lt;/p&gt;

&lt;h3 id="finalizando"&gt;Finalizando&lt;/h3&gt;

&lt;p&gt;Os exemplos são simples porque acredite, é simples de usar :)&lt;/p&gt;

&lt;p&gt;Além disso, existe várias outras coisas que se pode fazer, como utilização de &lt;a href="https://github.com/janl/mustache.js#non-empty-lists"&gt;listas&lt;/a&gt;, &lt;a href="https://github.com/janl/mustache.js#false-values-or-empty-lists"&gt;condicionais&lt;/a&gt; de uma forma um tanto quanto diferente, &lt;a href="https://github.com/janl/mustache.js#functions"&gt;funções&lt;/a&gt; e outras features.&lt;/p&gt;

&lt;p&gt;Espero que daqui para frente você não sofra mais realizando esse tipo de trabalho.&lt;/p&gt;

&lt;p&gt;Até mais!&lt;/p&gt;</content:encoded></item><item><title>Adeus Callback Hell</title><description>&lt;p&gt;Callback hell, por incrível que pareça é algo muito utilizado. Por qual motivo? Não faço ideia, cada caso um caso... :)&lt;/p&gt;

&lt;p&gt;Mas o que se sabe, é que &lt;strong&gt;não&lt;/strong&gt; se deve fazer!&lt;/p&gt;

&lt;p&gt;Motivos: &lt;br&gt;
* Legibilidade do código
* Código mais limpo
* &lt;strong&gt;Porque é muito feio&lt;/strong&gt;
* ...&lt;/p&gt;

&lt;p&gt;Ta, mas afinal, que diabos é esse tal&lt;/p&gt;</description><link>http://localhost:2368/2016/03/27/adeus-callback-hell/</link><guid isPermaLink="false">71ba6775-2ae3-4943-9d7f-c17b8798cebd</guid><dc:creator>Daniel Röhers Moura</dc:creator><pubDate>Sun, 27 Mar 2016 23:34:00 GMT</pubDate><content:encoded>&lt;p&gt;Callback hell, por incrível que pareça é algo muito utilizado. Por qual motivo? Não faço ideia, cada caso um caso... :)&lt;/p&gt;

&lt;p&gt;Mas o que se sabe, é que &lt;strong&gt;não&lt;/strong&gt; se deve fazer!&lt;/p&gt;

&lt;p&gt;Motivos: &lt;br&gt;
* Legibilidade do código
* Código mais limpo
* &lt;strong&gt;Porque é muito feio&lt;/strong&gt;
* ...&lt;/p&gt;

&lt;p&gt;Ta, mas afinal, que diabos é esse tal de callback hell? o.O&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;function sum (value) {  
    sum1(value, function (value) {
        sum2(value, function (value) {
            sum3(value, function (value) {
                sum4(value, function (value) {
                    sum5(value, function (value) {
                        sum6(value, function (value) {
                            sum7(value, function (value) {
                                sum8(value, function (value) {
                                    sum9(value, function (value) {
                                        sum10(value, function (value) {
                                            console.log(value);
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Exemplo completo: &lt;a href="https://github.com/danielrohers/callback-hell-sky/blob/master/callbackHell.js"&gt;callbackHell.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;É essa coisa "linda" acima :(&lt;/p&gt;

&lt;p&gt;&lt;em&gt;E esse ainda esta bonito, existem piores!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Agora que sabemos o quão ruim é, como resolver? Existem várias formas, iremos ver o lindo e maravilhoso módulo async &amp;lt;3&lt;/p&gt;

&lt;h2 id="async"&gt;Async&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/caolan/async"&gt;Async&lt;/a&gt; é um módulo com N utilidades assíncronas para JavaScript Client/Server.&lt;/p&gt;

&lt;p&gt;Esse exemplo de callback hell visto, basicamente é uma função &lt;code&gt;sum&lt;/code&gt; que recebe um valor (value) que se propaga para outra função, que realiza uma soma e retorna essa valor, que é passado para outra e assim por diante...&lt;/p&gt;

&lt;p&gt;Para esse caso, usaremos um método de controle de fluxo (&lt;a href="https://github.com/caolan/async#control-flow"&gt;control flow&lt;/a&gt;) do async, chamado &lt;a href="https://github.com/caolan/async#waterfall"&gt;waterfall&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id="waterfall"&gt;Waterfall&lt;/h4&gt;

&lt;p&gt;Waterfall em PT-BR seria cascata, que é realmente o fluxo desse método, ou seja, é chamado N funções, onde executa uma de cada vez, passando ou não os valores de cada uma para a seguinte. Exemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;function sum (value) {  
    async.waterfall([
        async.apply(sum1, value),
        async.apply(sum2),
        async.apply(sum3),
        async.apply(sum4),
        async.apply(sum5),
        async.apply(sum6),
        async.apply(sum7),
        async.apply(sum8),
        async.apply(sum9),
        async.apply(sum10)
    ], function (err, result) {
        console.log(result);
    })
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Exemplo completo: &lt;a href="https://github.com/danielrohers/callback-hell-sky/blob/master/callbackSky.js"&gt;callbackSky.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No exemplo acima, temos a mesma função &lt;code&gt;sum&lt;/code&gt; recebendo &lt;code&gt;value&lt;/code&gt;, mas agora muito mais elegante ;D&lt;/p&gt;

&lt;p&gt;Com waterfall colocamos as chamadas na ordem que desejamos que executem, onde os dados irão se propagar entre cada uma, através da função callback de cada.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS. A propagação só será interrompida caso ocorra algum erro. Fazendo com que encerre imediatamente o fluxo independente de onde esteja e execute a &lt;a href="https://github.com/danielrohers/callback-hell-sky/blob/master/callbackSky.js#L55"&gt;função de callback do waterfall&lt;/a&gt;, caso ela exista.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Bueno, era isso!&lt;/p&gt;

&lt;p&gt;Espero que você, caso ainda use da prática do callback hell, nunca mais faça isso. Claro que, você não precisa  mais deixar de encadear funções e usar waterfall e demais soluções em todo o seu código, apenas saiba balancear, mantendo seu código o mais limpo possível.&lt;/p&gt;

&lt;p&gt;Até mais :)&lt;/p&gt;</content:encoded></item><item><title>Seu blog com Hexo</title><description>&lt;h1 id="hospedagem"&gt;Hospedagem&lt;/h1&gt;

&lt;p&gt;Quando decidi criar o blog, uma coisa era certa, iria hospedar no &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt; através do &lt;a href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mas por que nele? Ora... É gratuíto e funciona muito bem :)&lt;/p&gt;

&lt;h1 id="tecnologia"&gt;Tecnologia&lt;/h1&gt;

&lt;h2 id="jekyll"&gt;Jekyll&lt;/h2&gt;

&lt;p&gt;Bueno, chegou a hora de definir como iria fazer, de imediato pensei no &lt;a href="http://jekyllrb.com"&gt;Jekyll&lt;/a&gt; (resumidamente, um gerador de sites&lt;/p&gt;</description><link>http://localhost:2368/2016/02/09/seu-blog-com-hexo/</link><guid isPermaLink="false">80d6dc5d-fb98-47c5-8fd0-5694f2149768</guid><dc:creator>Daniel Röhers Moura</dc:creator><pubDate>Tue, 09 Feb 2016 22:33:00 GMT</pubDate><content:encoded>&lt;h1 id="hospedagem"&gt;Hospedagem&lt;/h1&gt;

&lt;p&gt;Quando decidi criar o blog, uma coisa era certa, iria hospedar no &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt; através do &lt;a href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mas por que nele? Ora... É gratuíto e funciona muito bem :)&lt;/p&gt;

&lt;h1 id="tecnologia"&gt;Tecnologia&lt;/h1&gt;

&lt;h2 id="jekyll"&gt;Jekyll&lt;/h2&gt;

&lt;p&gt;Bueno, chegou a hora de definir como iria fazer, de imediato pensei no &lt;a href="http://jekyllrb.com"&gt;Jekyll&lt;/a&gt; (resumidamente, um gerador de sites estáticos), pois é muito usado para esse propósito e também o GitHub recomenda...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Por que mudar de ideia?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pois então, Jekyll é em Ruby, o que me deixa triste pois é um porre de instalar. Também precisa de outras techs, &lt;a href="http://jekyllrb.com/docs/installation/#requirements"&gt;segue todas&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruby-lang.org"&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rubygems.org"&gt;RubyGems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nodejs.org"&gt;NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Outro motivo, é o trabalho, muita configuração para deixar tudo "redondinho", o que não deveria acontecer, pois é um blog... Tem que ser extremente fácil e rápido de fazer.&lt;/p&gt;

&lt;h2 id="hexo"&gt;Hexo&lt;/h2&gt;

&lt;p&gt;Diante de todos os tramites necessários para Jekyll e por eu ser um JavaScript Lover, fui em busca de algum gerador com NodeJS e finalmente cheguei no lindo e maravilhoso &lt;a href="https://hexo.io"&gt;Hexo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hexo é super fácil de instalar através do NPM e as configurações dele seguem da mesma forma&lt;/p&gt;

&lt;h3 id="review"&gt;Review&lt;/h3&gt;

&lt;h4 id="requesitos"&gt;Requesitos&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nodejs.org"&gt;NodeJS v.4.0.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="instalao"&gt;Instalação&lt;/h4&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;npm install hexo-cli -g  
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="primeirospassos"&gt;Primeiros passos&lt;/h4&gt;

&lt;p&gt;Criar toda a estrutura necessária do Hexo&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;hexo init blog  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Entre no projeto&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;cd blog  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instale todas as dependências necessárias&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;npm install  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Subindo seu blog :)&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;hexo server  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Após alguns ms, irá aparecer a seguinte mensagem, ou semelhante:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;INFO  Hexo is running at &lt;a href="http://0.0.0.0:4000/"&gt;http://0.0.0.0:4000/&lt;/a&gt;. Press Ctrl+C to stop.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Então acesse e já pode desfrutar do seu blog&lt;/p&gt;

&lt;h4 id="documentao"&gt;Documentação&lt;/h4&gt;

&lt;p&gt;A &lt;a href="https://hexo.io/docs"&gt;documentação&lt;/a&gt; do Hexo é super clean e de fácil compreensão, aconselho dar uma olhada nela para compreender todo o ecosistema antes de definir em usa-la.&lt;/p&gt;

&lt;h4 id="temas"&gt;Temas&lt;/h4&gt;

&lt;p&gt;Os &lt;a href="https://hexo.io/themes"&gt;temas&lt;/a&gt; do Hexo ficam dentro da pasta &lt;code&gt;themes&lt;/code&gt;, é fácil de alterar algum existente e mais ainda instalar algum novo, afinal, basta adiciona-lo na pasta :)&lt;/p&gt;

&lt;p&gt;No momento não estou afim de criar um tema layout totalmente próprio, então estou utilizando o tema &lt;a href="https://github.com/DrakeLeung/hexo-theme-again"&gt;Again&lt;/a&gt;&lt;/p&gt;

&lt;h4 id="plugins"&gt;Plugins&lt;/h4&gt;

&lt;p&gt;Como tudo nele, os &lt;a href="https://hexo.io/plugins"&gt;plugins&lt;/a&gt; são simples para instalar, sem contar na busca fornecida que torna muito mais fácil encontrar algum plugin que satisfaça sua necessidade.&lt;/p&gt;

&lt;p&gt;Falando em plugins, tem dois indispensáveis ao meu ver.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jaredly/hexo-admin"&gt;hexo-admin&lt;/a&gt;, um plugin que transforma a criação, edição e toda manipulação do seu blog muito tranquila e dinâmica.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/hexojs/hexo-deployer-git"&gt;hexo-deployer-git&lt;/a&gt;, plugin que realiza deploy para o GitHub em apenas um comando. Basta você &lt;a href="https://github.com/hexojs/hexo-deployer-git#options"&gt;configurar&lt;/a&gt; o repo e branch e depois executar o comando:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;hexo deploy  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Com ele você irá realizar o deploy dos arquivos estáticos &lt;a href="https://hexo.io/docs/generating.html"&gt;gerados&lt;/a&gt; para seu blog.&lt;/p&gt;

&lt;p&gt;Você também pode agilizar realizando a geração dos arquivos e deploy ao mesmo tempo.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;hexo deploy --generate  
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="exit"&gt;Exit&lt;/h1&gt;

&lt;p&gt;E era isso pessoal, Hexo é um gerador muito fácil para desenvolver e contribuir para ele. Fiz apenas um review rápido sobre ele. Aconselho a todos que quiserem criar seu blog, estudarem sua documentação para ver quão lindamente ele é.&lt;/p&gt;

&lt;p&gt;Segue o source do meu blog:     &lt;a href="https://github.com/danielrohers/danielrohers.github.io"&gt;danielrohers.github.io&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Hello World Tchê</title><description>&lt;p&gt;Finalmente depois de muito tempo (anos) resolvi criar um mero blog.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Por que agora?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A alguns anos venho compartilhando conteúdo com diversas pessoas de várias formas, então, por que não centralizar esse conteúdo?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;E o que irá postar Daniel?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Não faço ideia. Provável que será quase tudo relacionado a tecnologia,&lt;/p&gt;</description><link>http://localhost:2368/2016/02/05/welcome-to-ghost/</link><guid isPermaLink="false">4ea537cd-0b50-4063-b12e-949bf874e466</guid><category>Getting Started</category><dc:creator>Daniel Röhers Moura</dc:creator><pubDate>Fri, 05 Feb 2016 21:27:00 GMT</pubDate><content:encoded>&lt;p&gt;Finalmente depois de muito tempo (anos) resolvi criar um mero blog.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Por que agora?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A alguns anos venho compartilhando conteúdo com diversas pessoas de várias formas, então, por que não centralizar esse conteúdo?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;E o que irá postar Daniel?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Não faço ideia. Provável que será quase tudo relacionado a tecnologia, problemas que sofri e como resolvi entre outras coisas... espero que algo você aproveite :)&lt;/p&gt;

&lt;p&gt;Tchê, até mais!&lt;/p&gt;</content:encoded></item></channel></rss>